npx create-react-app streamlist
cd streamlist
npm install react-router-dom
// src/App.js
import React, { useState } from 'react';
import './styles/App.css';

const App = () => {
  const [events, setEvents] = useState([]);
  const [input, setInput] = useState('');

  const addEvent = (e) => {
    e.preventDefault();
    if (input.trim()) {
      setEvents([...events, { text: input, completed: false, id: Date.now() }]);
      setInput('');
    }
  };

  const updateEvent = (id, newText) => {
    setEvents(events.map(event => 
      event.id === id ? { ...event, text: newText } : event
    ));
  };

  const deleteEvent = (id) => {
    setEvents(events.filter(event => event.id !== id));
  };

  const toggleComplete = (id) => {
    setEvents(events.map(event => 
      event.id === id ? { ...event, completed: !event.completed } : event
    ));
  };

  return (
    <div className="app">
      <h1>StreamList</h1>
      <form onSubmit={addEvent}>
        <input 
          type="text" 
          value={input} 
          onChange={(e) => setInput(e.target.value)} 
          placeholder="Add an event" 
        />
        <button type="submit">Add</button>
      </form>
      <ul>
        {events.map((event) => (
          <EventItem 
            key={event.id} 
            event={event} 
            updateEvent={updateEvent} 
            deleteEvent={deleteEvent} 
            toggleComplete={toggleComplete} 
          />
        ))}
      </ul>
    </div>
  );
};

export default App;
// src/components/EventItem.js
import React, { useState } from 'react';

const EventItem = ({ event, updateEvent, deleteEvent, toggleComplete }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [editInput, setEditInput] = useState(event.text);

  const handleEdit = () => {
    setIsEditing(true);
  };

  const handleSave = () => {
    updateEvent(event.id, editInput);
    setIsEditing(false);
  };

  return (
    <li className={`event-item ${event.completed ? 'completed' : ''}`}>
      {isEditing ? (
        <>
          <input 
            type="text" 
            value={editInput} 
            onChange={(e) => setEditInput(e.target.value)} 
          />
          <button onClick={handleSave}>Save</button>
        </>
      ) : (
        <>
          <span onClick={() => toggleComplete(event.id)}>{event.text}</span>
          <button onClick={handleEdit}>Edit</button>
          <button onClick={() => deleteEvent(event.id)}>Delete</button>
          <button onClick={() => toggleComplete(event.id)}>
            {event.completed ? 'Undo' : 'Complete'}
          </button>
        </>
      )}
    </li>
  );
};

export default EventItem;
/* src/styles/App.css */
body {
  font-family: 'Roboto', sans-serif;
  background-color: #f0f0f0;
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

.app {
  background: white;
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

form {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 1rem;
}

input[type="text"] {
  padding: 0.5rem;
  font-size: 1rem;
  margin-right: 1rem;
}

button {
  padding: 0.5rem 1rem;
  font-size: 1rem;
  cursor: pointer;
}

ul {
  list-style: none;
  padding: 0;
}

.event-item {
  background: #fff;
  padding: 0.5rem;
  margin-bottom: 0.5rem;
  border-radius: 4px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.event-item.completed span {
  text-decoration: line-through;
}

.event-item button {
  margin-left: 0.5rem;
}
